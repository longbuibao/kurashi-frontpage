generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String  @default("")
  posts    Post[]
  userId   String  @default("")
}

model Catalog {
  id          String  @id @default(uuid())
  name        String
  size        String
  sizeUnit    String
  isAvailable Boolean
  thumbnail   String
  pdfLink     String  @default("#")
}

model Post {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  title          String
  content        String?
  published      Boolean       @default(false)
  viewCount      Int           @default(0)
  author         User?         @relation(fields: [authorId], references: [id])
  postCategoryId String?
  postCategory   PostCategory? @relation(fields: [postCategoryId], references: [id])
  authorId       String?
  thumbnail      String
  url            String        @default("#")
  isTrending     Boolean       @default(false)
  summary        String        @default("Post summary")
}

model PostCategory {
  id           String  @id @default(uuid())
  categoryName String
  published    Boolean @default(false)
  Post         Post[]
}

model Product {
  id                  String             @id @default(uuid())
  uniqueName          String?            @unique @default(uuid())
  name                String
  productId           String             @default("")
  productVideo        String             @default("#")
  thumbnail           String             @default("#")
  url                 String             @default("#")
  categoryId          String?
  isAvailable         Boolean            @default(false)
  subCategoryId       String?
  primaryProductImage String             @default("#")
  productIntro        ProductIntro[]
  size                ProductSize?
  category            Category?          @relation(fields: [categoryId], references: [id])
  // deprecated subCategory, dont use it, use secondaryCategory instead
  subCategory         SubCategory?       @relation(fields: [subCategoryId], references: [id])
  origin              ProductOrigin[]
  component           ProductComponent[]
  ProductMetadata     ProductMetadata?
  ProductColor        ProductColor[]
  ProductTag          ProductTag[]
  ProductVariants     ProductVariants[]
  productImages       ProductImages[]
  // indicate that if a product has landingpage. For example, the "thep trang men" has it owns landing page
  hasLandingPage      Boolean            @default(false)
  landingPageUrl      String             @default("#")
  shortIntro          String             @default("")
  // the order to sort the list of products
  order               Int                @default(-1)
  isTrendingProduct   Boolean            @default(false)
  isAccessoryProduct  Boolean            @default(false)
  price               Float              @default(0)
  secondaryCategoryId String?
  secondaryCategory   SecondaryCategory? @relation(fields: [secondaryCategoryId], references: [id])
}

model SecondaryCategory {
  id        String    @id @default(uuid())
  name      String
  thumbnail String
  // this should be a readable url id
  url       String    @default("#")
  content   String    @default("")
  Product   Product[]
}

model ProductImages {
  id            String       @id @default(uuid())
  title         String
  content       String
  imageUrl      String
  Product       Product?     @relation(fields: [productId], references: [id])
  productId     String?
  ProductSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  productSizeId String?
}

model ProductIntro {
  id        String   @id @default(uuid())
  title     String
  content   String
  introImg  String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductSize {
  id               String             @id @default(uuid())
  unit             String             @default("mm")
  quantity         Int
  twoDimCad        String
  productManual    String
  product          Product?           @relation(fields: [productId], references: [id])
  productId        String?            @unique
  productSizeImage ProductImages[]
  dimension        ProductDimension[]
}

model ProductDimension {
  id            String       @id @default(uuid())
  name          String
  value         Float
  ProductSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  productSizeId String?
}

model ProductComponent {
  id        String            @id @default(uuid())
  name      String
  productId String?
  product   Product?          @relation(fields: [productId], references: [id])
  material  ProductMaterial[]
}

model Category {
  id                 String          @id @default(uuid())
  name               String
  isSpecialCategory  Boolean
  thumbnail          String          @default("#")
  productId          Product[]
  subCategories      SubCategory[]
  intros             CategoryIntro[]
  order              Int             @default(-1)
  categoryUniqueName String          @default("")
}

model CategoryIntro {
  id         String    @id @default(uuid())
  title      String
  content    String
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  thumbnail  String
  content    String    @default("")
  products   Product[]
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model ProductMaterial {
  id      String             @id @default(uuid())
  name    String
  product ProductComponent[]
}

model ProductOrigin {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model ProductMetadata {
  id        String   @id @default(uuid())
  productId String?  @unique
  Product   Product? @relation(fields: [productId], references: [id])
}

model ProductColor {
  id        String   @id @default(uuid())
  name      String
  colorHex  String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
}

model ProductTag {
  id        String   @id @default(uuid())
  name      String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
}

model ProductVariants {
  id          String    @id @default(uuid())
  thumbnail   String    @default("#")
  variantName String
  unit        String    @default("unit")
  products    Product[]
}

model PageMetadata {
  id          String     @id @default(uuid())
  pageName    String     @default("PLEASE ADD YOUR PAGE TITLE NAME HERE")
  pageTitle   PageTitle? @relation(fields: [pageTitleId], references: [id])
  pageTitleId String?
}

model PageTitle {
  id           String         @id @default(uuid())
  page         String
  title        String
  PageMetadata PageMetadata[]
}

model BlogRegistrationList {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactRegistrationList {
  id          String   @id @default(uuid())
  email       String
  message     String
  name        String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
